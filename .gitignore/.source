`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2017/11/23 21:03:42
// Design Name: 
// Module Name: pcpu
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

//************* 全局宏定义 *************//
`define idle    1'b0
`define exec    1'b1

`define gr0     3'b000
`define gr1     3'b001
`define gr2     3'b010
`define gr3     3'b011
`define gr4     3'b100
`define gr5     3'b101
`define gr6     3'b110
`define gr7     3'b111

//************* 指令宏定义 *************//
`define NOP		5'b00000
`define HALT	5'b00001
`define LOAD	5'b00010
`define STORE	5'b00011
`define SLL		5'b00100
`define SLA		5'b00110
`define SRL		5'b00101
`define SRA		5'b00111
`define ADD		5'b01000
`define ADDI	5'b01001
`define SUB		5'b01010
`define SUBI	5'b01011
`define CMP		5'b01100
`define AND		5'b01101
`define OR		5'b01110
`define XOR		5'b01111
`define LDIH	5'b10000
`define ADDC	5'b10001
`define SUBC	5'b10010
`define JUMP	5'b11000
`define JMPR	5'b11001
`define BZ		5'b11010
`define BNZ		5'b11011
`define BN		5'b11100
`define BNN		5'b11101
`define BC		5'b11110
`define BNC		5'b11111
        




module pcpu(

//input
input wire clk,enable,reset,start,
input wire[15:0]d_datain,i_datain,
input wire[3:0]select_y,

//output

output [7:0]d_addr,i_addr,
output [15:0]d_dataout,
output d_we,
//output reg[15:0] y,
output reg [6:0] a_to_g,
output reg [3:0] select

    );
	

//************* 寄存器 *************//
reg clock;
reg [15:0] y;
reg[7:0] pc;
reg state,next_state;
reg[15:0] gr[7:0];  //通用寄存器
reg[15:0] id_ir, ex_ir, mem_ir, wb_ir;   //状态寄存器
reg[15:0] reg_A,reg_B,smdr;  //@ID
reg[15:0] reg_C,smdr1;  //@EX
reg nf,zf,cf;  //flag
reg dw;
reg[15:0] reg_C1;  //@WB
wire branch_flag;


//*********ALU**********//
reg[15:0] ALUo;
reg C; //cf flag

	
	
//************* CPU control *************//

always @(posedge clock)
	begin
		if (!reset)
			state <= `idle;
		else
			state <= next_state;
	end
	
always @(*)
	begin
		case (state)
			`idle : 
				if ((enable == 1'b1) 
				&& (start == 1'b1))
					next_state <= `exec;
				else	
					next_state <= `idle;
			`exec :
				if ((enable == 1'b0) 
				|| (wb_ir[15:11] == `HALT))
					next_state <= `idle;
				else
					next_state <= `exec;
		endcase
	end
	
	
	
//************* IF *************//

assign i_addr = pc;
always @(posedge clock or posedge reset)
	begin
		if (!reset)
		    begin
				id_ir <= 16'b0000_0000_0000_0000;
			    pc <= 8'b0000_0000;
		    end
			
		else if (state == `exec)
			  begin
			     if(branch_flag)
					begin
					  pc <= reg_C[7:0];
					  id_ir <= {16'b0000_0000_0000_0000};
					end
		else if ((id_ir[15:11] == `LOAD)
	           &&((i_datain[10:8] == id_ir[10:8])
                     && (((i_datain[10:8] == id_ir[10:8])
					       && I_R1_TYPE(i_datain[15:11]))
						||((i_datain[6:4] == id_ir[10:8])
                           && I_R2_TYPE(i_datain[15:11]))
                        ||((i_datain[2:0] == id_ir[10:8])
						   && I_R3_TYPE(i_datain[15:11])))))					   
			  begin
                 pc <= pc;
				 id_ir <= {16'b0000_0000_0000_0000};
               end			  
		else
			  begin
				 pc <= pc + 1;
				 id_ir <= i_datain;
			  end

		end
	end
	
	
//************* ID *************//

always @(posedge clock or posedge reset)
	begin
		if (!reset)
		    begin
			   ex_ir <= 16'b0000_0000_0000_0000;
			   reg_A <= 16'b0000_0000_0000_0000;
			   reg_B <= 16'b0000_0000_0000_0000;
			   smdr <= 16'b0000_0000_0000_0000;
		    end
			
		else if (state ==`exec)
		    begin
				 if(branch_flag)
				  ex_ir <= {16'b0000_0000_0000_0000};
				
				else  
			      ex_ir <= id_ir;

//**************smdr***************//
               if (id_ir[15:11] == `STORE)
			      begin
				     if((id_ir[10:8] == ex_ir[10:8])
					     &&I_REG_TYPE(ex_ir[15:11]))
					    smdr <= ALUo;
					 else if((id_ir[10:8] == mem_ir[10:8])
					          &&I_REG_TYPE(mem_ir[15:11]))
						if(mem_ir[15:11] == `LOAD)
                           smdr <= d_datain;
                        else
                           smdr <= reg_C;
                     else if((id_ir[10:8] == wb_ir[10:8])
					          &&I_REG_TYPE(wb_ir[15:11]))
						   smdr <= reg_C1;
					 else	   
                           smdr <= gr[id_ir[10:8]];
	               end
				   
               else
                   smdr <= smdr; 
				   
//**************reg_A**************//
					if (id_ir[15:11] == `JUMP)
						reg_A <= 16'b0000_0000_0000_0000;
					else if (I_R1_TYPE(id_ir[15:11]))
						begin
							if ((id_ir[10:8] == ex_ir[10:8])
									&& I_REG_TYPE(ex_ir[15:11]))
								reg_A <= ALUo;
							else if ((id_ir[10:8] == mem_ir[10:8])
									&& I_REG_TYPE(mem_ir[15:11]))
								if (mem_ir[15:11] == `LOAD)
									reg_A <= d_datain;
								else
									reg_A <= reg_C;
							else if ((id_ir[10:8] == wb_ir[10:8])
									&& I_REG_TYPE(wb_ir[15:11]))
								reg_A <= reg_C1;
							else
								reg_A <= gr[id_ir[10:8]];
						end
					else if (I_R2_TYPE(id_ir[15:11]))
						begin
							if ((id_ir[6:4] == ex_ir[10:8])
									&& I_REG_TYPE(ex_ir[15:11]))
								reg_A <= ALUo;
							else if ((id_ir[6:4] == mem_ir[10:8])
									&& I_REG_TYPE(mem_ir[15:11]))
								if (mem_ir[15:11] == `LOAD)
									reg_A <= d_datain;
								else
									reg_A <= reg_C;
							else if ((id_ir[6:4] == wb_ir[10:8])
									&& I_REG_TYPE(wb_ir[15:11]))
								reg_A <= reg_C1;
							else
								reg_A <= gr[id_ir[6:4]];
						end
					else
						reg_A <= reg_A;
					
//**************reg_B**************//
					if (I_V3_TYPE(id_ir[15:11]))
						reg_B <= {12'b0000_0000_0000, id_ir[3:0]};
					else if (I_ZEROV2V3_TYPE(id_ir[15:11]))
						reg_B <= {8'b0000_0000, id_ir[7:0]};
					else if (I_V2V3ZERO_TYPE(id_ir[15:11]))
						reg_B <= {id_ir[7:0], 8'b0000_0000};
					else if (I_R3_TYPE(id_ir[15:11]))
						begin
							if ((id_ir[2:0] == ex_ir[10:8])
									&& I_REG_TYPE(ex_ir[15:11]))
								reg_B <= ALUo;
							else if ((id_ir[2:0] == mem_ir[10:8])
									&& I_REG_TYPE(mem_ir[15:11]))
								if (mem_ir[15:11] == `LOAD)
									reg_B <= d_datain;
								else
									reg_B <= reg_C;
							else if ((id_ir[2:0] == wb_ir[10:8])
									&& I_REG_TYPE(wb_ir[15:11]))
								reg_B <= reg_C1;
							else
								reg_B <= gr[id_ir[2:0]];
						end
					else
						reg_B <= reg_B;
	
			end
	end
	//reg bf; // bypassing flag	
	reg lp;
//************* EX *************//	
	always @(posedge clock or posedge reset)
	    begin
		    if (!reset)
			   begin
		         mem_ir <= 16'b0000_0000_0000_0000;
				 reg_C <= 16'b0000_0000_0000_0000;
				 smdr1 <= 16'b0000_0000_0000_0000;
				 dw <= 1'b0;
				 zf <= 1'b0;
				 nf <= 1'b0;
				 cf <= 1'b0;
			   end	
			   
		    else if(state == `exec)
			   begin
				 reg_C <= ALUo;
				 if (lp)
					begin
						mem_ir<=0;
			            reg_C<=0;
					end
				else 
					begin
					 if(branch_flag)
						 begin mem_ir <= {16'b0000_0000_0000_0000}; /*bf <= 0;*/ end
					
					 /*else if ( MODE_4(ex_ir[15:11])
							&& (MODE_4(mem_ir[15:11]) != 1'b1)
							&& (MODE_1(mem_ir[15:11]) != 1'b1)
							)
						 begin
							bf <= 1;
							wb_ir <= ex_ir;
						 end*/
						 
					 else
						 begin 
						 mem_ir <= ex_ir;
						 //reg_C <= ALUo;
						 /*bf <= 0;*/ 
						 end
					
					 if(branch_flag)	

						begin
						   zf <= zf;
						   nf <= nf;					   
						   cf <= cf;
						end
						
					 else if ((ex_ir[15:11] == `ADD) 
					 || (ex_ir[15:11] == `CMP)
					 || (ex_ir[15:11] == `ADDI)
					 || (ex_ir[15:11] == `LDIH)
					 || (ex_ir[15:11] == `ADDC)
					 || (ex_ir[15:11] == `SUB)
					 || (ex_ir[15:11] == `SUBI)
					 || (ex_ir[15:11] == `SUBC)
					 || (ex_ir[15:11] == `AND)
					 || (ex_ir[15:11] == `OR)
					 || (ex_ir[15:11] == `XOR)
					 || (ex_ir[15:11] == `SLL)
					 || (ex_ir[15:11] == `SRL)
					 || (ex_ir[15:11] == `SLA))
						begin
							cf <= C; //carry flag
							if (ALUo == 16'b0000_0000_0000_0000)
								zf <= 1'b1;
							else
								zf <= 1'b0;
							if (ALUo[15] == 1'b1)
								nf <= 1'b1;
							else
								nf <= 1'b0;
						end
					 else
						begin
						   zf <= zf;
						   nf <= nf;
						   cf <= cf;
						end
					 
					 if(branch_flag)
						begin
							dw <= 1'b0;
							smdr1 <= smdr1;
						end
						
					 else if (ex_ir[15:11] == `STORE)
						begin
						   dw <= 1'b1;
						   smdr1 <= smdr;
						end
					 else
						begin
						   dw <= 1'b0;
						   smdr1 <= smdr1;
						end
					
					end
			end
		end	
//**********ALU**********
    always @(*)
      begin 
        if (ex_ir[15:11] == `AND)
		   begin
		      C <= 1'b0;
              ALUo <= reg_A & reg_B;
			end
		else if (ex_ir[15:11] == `OR)
            begin
              C <= 1'b0;			
			  ALUo <= reg_A | reg_B;
			end
		else if (ex_ir[15:11] == `XOR)
		    begin
              C <= 1'b0;
			  ALUo <= reg_A ^ reg_B;
			end
		else if (ex_ir[15:11] == `SLL)
              ALUo <= reg_A << reg_B;
		else if (ex_ir[15:11] == `SRL)
		      ALUo <= reg_A >> reg_B;
		else if (ex_ir[15:11] == `SLA)
			  ALUo <= reg_A <<< reg_B[3:0];
	    else if(ex_ir[15:11] == `SRA)
			        begin
			            case(reg_B)
			                4'b0000:
			                    ALUo <= reg_A;
			                4'b0001:
			                    ALUo <= {reg_A[15],reg_A[15:1]};
			                4'b0010:
			                    ALUo <= {reg_A[15],reg_A[15],reg_A[15:2]};
			                4'b0011:
			                    ALUo <= {reg_A[15],reg_A[15],reg_A[15],reg_A[15:3]};
			                4'b0100:
			                    ALUo <= {reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15:4]};
			                4'b0101:
			                    ALUo <= {reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15:5]};
			                4'b0110:
			                    ALUo <= {reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15:6]};
			                4'b0111:
			                    ALUo <= {reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15:7]};
			                4'b1000:
			                    ALUo <= {reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15:8]};
			                4'b1001:
			                    ALUo <= {reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15:9]};
			                4'b1010:
			                    ALUo <= {reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15:10]};
			                4'b1011:
			                    ALUo <= {reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15:11]};
			                4'b1100:
			                    ALUo <= {reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15:12]};
			                4'b1101:
			                    ALUo <= {reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15:13]};
			                4'b1110:
			                    ALUo <= {reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15:14]};
			                4'b1111:
			                    ALUo <= {reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15],reg_A[15]};
			            endcase
			        end		  
		else if ((ex_ir[15:11] == `SUB)
              || (ex_ir[15:11] == `SUBI)
              || (ex_ir[15:11] == `CMP))
              {C, ALUo} <= reg_A - reg_B;
        else if(ex_ir[15:11] == `SUBC)
              {C, ALUo} <= reg_A - reg_B - cf;
        else if(ex_ir[15:11] == `ADDC)
              {C, ALUo} <= reg_A + reg_B + cf;
        else 
              {C, ALUo} <= reg_A + reg_B;		
    end

			
//************* MEM *************//
assign d_addr = reg_C[7:0];
assign d_we = dw;
assign d_dataout = smdr1;
assign branch_flag = ((mem_ir[15:11] == `JUMP)
						|| (mem_ir[15:11] == `JMPR)
						|| ((mem_ir[15:11] == `BZ) && (zf == 1'b1))
						|| ((mem_ir[15:11] == `BNZ) && (zf == 1'b0))
						|| ((mem_ir[15:11] == `BN) && (nf == 1'b1))
						|| ((mem_ir[15:11] == `BNN) && (nf == 1'b0))
						|| ((mem_ir[15:11] == `BC) && (cf == 1'b1))
						|| ((mem_ir[15:11] == `BNC) && (cf == 1'b0)));

											
always @(posedge clock or posedge reset)
	begin
		if(!reset)
		   begin
		     wb_ir <=16'b0000_0000_0000_0000;
			 reg_C1 <= 16'b0000_0000_0000_0000;
	       end

		else if (state == `exec)
			begin
				/*if (bf)
					begin end
				else
					wb_ir <= mem_ir;*/
				
				case(lp)
			    1'b1:
			        begin
			        wb_ir<=ex_ir;
			        reg_C1<=ALUo;
			        end
			    1'b0:
			    begin
					wb_ir <= mem_ir;
					
				if (mem_ir[15:11] == `LOAD)
					reg_C1 <= d_datain;
				else
					reg_C1 <= reg_C;
				end
				endcase
			end
		end
			
		
//************* WB *************//
always @(posedge clock or posedge reset)
	begin
		if(!reset)
            begin
			   gr[0] <= 16'b0000_0000_0000_0000;
			   gr[1] <= 16'b0000_0000_0000_0000;
			   gr[2] <= 16'b0000_0000_0000_0000;
			   gr[3] <= 16'b0000_0000_0000_0000;
			   gr[4] <= 16'b0000_0000_0000_0000;
			   gr[5] <= 16'b0000_0000_0000_0000;
			   gr[6] <= 16'b0000_0000_0000_0000;
			   gr[7] <= 16'b0000_0000_0000_0000;
			end
		
		else if(state == `exec)
			begin
				if (I_REG_TYPE(wb_ir[15:11]))
					gr[wb_ir[10:8]] <= reg_C1;
			end
	end	
			   

//************* PCPU TEST *************//
	always @(*)
		begin
			case (select_y)
				4'b0000: y <= {8'b0000_0000, pc};
				4'b0001: y <= id_ir;
				4'b0010: y <= ex_ir;
				4'b0011: y <= reg_B;
				4'b0100: y <= reg_A;
				4'b0101: y <= smdr;
				4'b0110: y <= mem_ir;
				4'b0111: y <= {12'b0000_0000_0000, zf, nf, cf, dw};
				4'b1000: y <= reg_C;
				4'b1001: y <= smdr1;
				4'b1010: y <= wb_ir;
				4'b1011: y <= reg_C1;
				4'b1100: y <= gr[0];
				4'b1101: y <= gr[1];
				4'b1110: y <= gr[2];
				4'b1111: y <= gr[3];
			endcase
		end
		
			
function I_REG_TYPE;
    input [4:0] op;
	begin
	   I_REG_TYPE = ((op == `LOAD)
	           || (op == `LDIH)
			   || (op == `ADD)
			   || (op == `ADDI)
			   || (op == `ADDC)
			   || (op == `SUB)
		       || (op == `SUBI)
			   || (op == `SUBC)
			   || (op == `AND)
			   || (op == `OR)
			   || (op == `XOR)
		       || (op == `SLL)
			   || (op == `SRL)
			   || (op == `SLA)
		       || (op == `SRA));			   

    end
endfunction

		//************* R1 as reg_A *************//
	    function I_R1_TYPE;
			input [4:0] op;
			begin
				I_R1_TYPE = ((op == `LDIH)
						|| (op == `ADDI)
						|| (op == `SUBI)
						|| (op == `JMPR)
						|| (op == `BZ)
						|| (op == `BNZ)
						|| (op == `BN)
						|| (op == `BNN)
						|| (op == `BC)
						|| (op == `BNC));
			end
		endfunction

		//************* R2 as reg_A *************//
		function I_R2_TYPE;
			input [4:0] op;
			begin
				I_R2_TYPE = ((op == `LOAD)
						|| (op == `STORE)
						|| (op == `ADD)
						|| (op == `ADDC)
						|| (op == `SUB)
						|| (op == `SUBC)
						|| (op == `CMP)
						|| (op == `AND)
						|| (op == `OR)
						|| (op == `XOR)
						|| (op == `SLL)
						|| (op == `SRL)
						|| (op == `SLA)
						|| (op == `SRA));
			end
		endfunction
		
		//************* R3 as reg_B *************//
		function I_R3_TYPE;
			input [4:0] op;
			begin
				I_R3_TYPE = ((op == `ADD)
						|| (op == `ADDC)
						|| (op == `SUB)
						|| (op == `SUBC)
						|| (op == `CMP)
						|| (op == `AND)
						|| (op == `OR)
						|| (op == `XOR));
			end
		endfunction
		
		//************* val3 as reg_B *************//
		function I_V3_TYPE;
			input [4:0] op;
			begin
				I_V3_TYPE = ((op == `LOAD)
						|| (op == `STORE)
						|| (op == `SLL)
						|| (op == `SRL)
						|| (op == `SLA)
						|| (op == `SRA));
			end
		endfunction
		
		//************* {0000_0000,val2,val3} as reg_B *************//
		function I_ZEROV2V3_TYPE;
			input [4:0] op;
			begin
				I_ZEROV2V3_TYPE = ((op == `ADDI)
						|| (op == `SUBI)
						|| (op == `JUMP)
						|| (op == `JMPR)
						|| (op == `BZ)
						|| (op == `BNZ)
						|| (op == `BN)
						|| (op == `BNN)
						|| (op == `BC)
						|| (op == `BNC));
			end
		endfunction
		
		//************* {val2,val3,0000_0000} as reg_B *************//
		function I_V2V3ZERO_TYPE;
			input [4:0] op;
			begin
				I_V2V3ZERO_TYPE = (op == `LDIH);
			end
		endfunction
		
		
		//*************5级全部走完*************//
		function MODE_1;
			input [4:0] op;
				begin
					MODE_1 = (op == `LOAD);
				end
		endfunction
		
		//*************没有WB*************//
		function MODE_2;
			input [4:0] op;
				begin
					MODE_2 = ((op == `STORE)
						|| (op == `JMPR)
						|| (op == `BZ)
						|| (op == `BNZ)
						|| (op == `BN)
						|| (op == `BNN)
						|| (op == `BC)
						|| (op == `BNC));
				end
		endfunction
		
		//*************没有WB and MEM*************//
		function MODE_3;
			input [4:0] op;
				begin
					MODE_3 = ((op == `CMP)
						|| (op == `JUMP)
						|| (op == `NOP));		
				end
		endfunction
		
		//*************没有MEM*************//
		function MODE_4;
			input [4:0] op;
				begin
					MODE_4 = ((op == `LDIH)
						|| (op == `ADDI)
						|| (op == `ADD)
						|| (op == `ADDC)
						|| (op == `SUB)
						|| (op == `SUBC)
						|| (op == `SUBI)
						|| (op == `AND)
						|| (op == `OR)
						|| (op == `XOR)
						|| (op == `SLL)
						|| (op == `SRL)
						|| (op == `SLA)
						|| (op == `SRA));
				end
		endfunction
		
	 //*********lowpower control****///
	always@(*)
		begin
			if(
                     (ex_ir[15:11] == `ADD)
                     && (ex_ir[15:11] == `ADDI)
                     && (ex_ir[15:11] == `LDIH)
                     && (ex_ir[15:11] == `ADDC)
                     && (ex_ir[15:11] == `SUB)
                     && (ex_ir[15:11] == `SUBI)
                     && (ex_ir[15:11] == `SUBC)
                     && (ex_ir[15:11] == `AND)
                     && (ex_ir[15:11] == `OR)
                     && (ex_ir[15:11] == `XOR)
                     && (ex_ir[15:11] == `SLL)
                     && (ex_ir[15:11] == `SRL)
                     && (ex_ir[15:11] == `SLA)
                     && (ex_ir[15:11] == `SRA)
                      && (mem_ir[15:11] != `LOAD)
                       && (mem_ir[15:11] != `ADD)
                      && (mem_ir[15:11] != `ADDI)
                     && (mem_ir[15:11] != `LDIH)
                     && (mem_ir[15:11] != `ADDC)
                     && (mem_ir[15:11] != `SUB)
                     && (mem_ir[15:11] != `SUBI)
                     && (mem_ir[15:11] != `SUBC)
                     && (mem_ir[15:11] != `AND)
                     && (mem_ir[15:11] != `OR)
                     && (mem_ir[15:11] != `XOR)
                     && (mem_ir[15:11] != `SLL)
                     && (mem_ir[15:11] != `SRL)
                     && (mem_ir[15:11] != `SLA)
                     && (mem_ir[15:11] != `SRA))
               lp<=1'b1;
               else lp<=1'b0;
      end
	
	//clock gating
	/*always @(posedge clock or posedge reset)
	    begin
			if(state == `exec)
				begin
					if ((id_ir[15:14] !== `LOAD) 
						&&(id_ir[15:14] !== `STORE))
						begin
							smdr <= smdr;
						end
					else if ((ex_ir[15:14] !== `LOAD) 
						&&(ex_ir[15:14] !== `STORE))
						begin
							smdr1 <= smdr1;
							dw <= dw;
						end
					else if ((mem_ir[15:14] !== `LOAD) 
						&&(mem_ir[15:14] !== `STORE))
						begin
							d_dataout <= d_dataout;
							d_addr <= d_addr;
							reg_C1 <= reg_C;	
						end
					else*/
						
	//*****7 seg*****//	
/*	function [6:0] segcode;
		input [3:0]incode;
			begin
				case(incode)
					4'b0000:segcode=7'b1111110;
					4'b0001:segcode=7'b0110000;
					4'b0010:segcode=7'b1101101;
					4'b0011:segcode=7'b1111001;
					4'b0100:segcode=7'b0110011;
					4'b0101:segcode=7'b1011011;
					4'b0110:segcode=7'b1011111;
					4'b0111:segcode=7'b1110000;
					4'b1000:segcode=7'b1111111;
					4'b1001:segcode=7'b1111011;
					4'b1010:segcode=7'b1110111;
					4'b1011:segcode=7'b0011111;
					4'b1100:segcode=7'b1001110;
					4'b1101:segcode=7'b0111101;
					4'b1110:segcode=7'b1001111;
					4'b1111:segcode=7'b1000111;
					default:segcode=7'b1111110;
				endcase
			end
	endfunction
	
	reg [3:0] scan = 4'b0001;
	always@ (posedge clock2)
		begin
			if (scan)
				begin
					scan <= (scan << 1 );
					case(scan)
						4'b0001: a_to_g <= segcode( y[3:0]);
						4'b0010: a_to_g <= segcode( y[7:4]);
						4'b0100: a_to_g <= segcode( y[11:8]);
						4'b1000: a_to_g <= segcode( y[15:12]);
						default  a_to_g <= 7'b1111110;
					endcase
				end
			else 
				begin 
					scan <= 4'b0001;
				end
			select <= scan;
		end*/
		
	//*****分频*****//

	
/*	reg [26:0] count = 0;
	always @(posedge clk) 
		begin
			if (count == 27'd49999999) 
				begin
					count <= 0;
					clock <= ~clock;					
				end
			else 
				begin
					count <= count + 1;
				end
		end
		
	reg clock2;
	reg [22:0] count2 = 0;
	always @(posedge clk) 
		begin
			if (count2 == 23'd49999) 
				begin
					count2 <= 0;
					clock2 <= ~clock2;					
				end
			else 
				begin
					count2 <= count2 + 1;
				end
		end*/
		
endmodule
